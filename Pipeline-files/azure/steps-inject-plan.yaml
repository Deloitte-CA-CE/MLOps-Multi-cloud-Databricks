parameters:
  - name: sub_folder
    type: string
    default: $(System.DefaultWorkingDirectory)

  - name: tf_version
    type: string
    default: latest

  - name: inject_flag
    type: boolean
    default: false

  - name: tfc_flag
    type: boolean
    default: false

  - name: terraform_extension_flag
    type: boolean
    default: false

  - name: tf_ws
    type: string
    default: ""

  - name: workload_folder
    type: string
    default: ""

  - name: env
    type: string
    default: ""

steps:
    - checkout: Self

    # - task: TerraformInstaller@0
    #   displayName: 'Install Terraform'
    #   condition: eq(${{parameters.terraform_extension_flag}}, 'true')
    #   inputs:
    #     terraformVersion: ${{ parameters.tf_version }}
    - task: Bash@3
      displayName: Install Terraform
      condition: eq(${{parameters.terraform_extension_flag}}, 'false')
      inputs:
        targetType: 'inline'
        script: |
              wget -qO - terraform.gpg https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/terraform-archive-keyring.gpg
              sudo echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/terraform-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" > /etc/apt/sources.list.d/terraform.list
              sudo apt update
              sudo apt install terraform
              terraform --version

    - script: | 
        sed -i 's/TF_WORKSPACE/'"${{ parameters.tf_ws }}"'/g' backend.tf
        sed -i 's/WORKFOLDER_NAME/'"${{ parameters.workload_folder }}"'/g' variables.tf
        sed -i 's/ENV/'"${{ parameters.env }}"'/g' variables.tf
      condition: eq(${{parameters.inject_flag}}, 'true')
      displayName: 'Inject Paremeters'  
      workingDirectory: '$(System.DefaultWorkingDirectory)/${{ parameters.sub_folder }}'
    
    - script: |
                RC_FILE=".terraformrc"
                cat > ${RC_FILE} << EOF
                credentials "app.terraform.io" {
                  token = "$(terraform-api-token)"
                }
                EOF
                mv .terraformrc ~/.terraformrc
                export TF_CLI_CONFIG_FILE="~/.terraformrc"
      name: terraform_cloud_credentials
      displayName: 'Use TFC token'
      condition: eq(${{parameters.tfc_flag}}, 'true')
      workingDirectory: '$(System.DefaultWorkingDirectory)/${{ parameters.sub_folder }}'

    - bash: terraform -chdir=${{ parameters.sub_folder }} init -input=false
      displayName: 'Terraform Init ${{ parameters.sub_folder }}'
      workingDirectory: '$(System.DefaultWorkingDirectory)'

    - task: PythonScript@0
      condition: eq(variables['Build.Reason'], 'PullRequest')
      displayName: 'Terraform Plan (PR Comment)'
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      inputs:
        workingDirectory: '$(System.DefaultWorkingDirectory)'
        failOnStderr: true
        scriptSource: 'inline'
        script: |
          import re
          import subprocess
          import shlex
          import requests
          import os
          import sys

          class PullRequestAPI():
            def __init__(self):
              SYSTEM_COLLECTIONURI = os.getenv('SYSTEM_COLLECTIONURI')
              SYSTEM_PULLREQUEST_PULLREQUESTID = os.getenv('SYSTEM_PULLREQUEST_PULLREQUESTID')
              SYSTEM_TEAMPROJECT = os.getenv('SYSTEM_TEAMPROJECT')
              BUILD_REPOSITORY_ID = os.getenv('BUILD_REPOSITORY_ID')
              BUILD_ID = os.getenv('BUILD_BUILDID')
              self.url = f"{SYSTEM_COLLECTIONURI}{SYSTEM_TEAMPROJECT}/_apis/git/repositories/" \
                        f"{BUILD_REPOSITORY_ID}/pullRequests/{SYSTEM_PULLREQUEST_PULLREQUESTID}" \
                        "/threads?api-version=6.0"
              self.headers = {
                  "content-type": "application/json",
                  "Authorization": f"BEARER {os.getenv('SYSTEM_ACCESSTOKEN')}"
              }
              self.buildurl = f"{SYSTEM_COLLECTIONURI}{SYSTEM_TEAMPROJECT}/_build/results?buildId={BUILD_ID}&view=logs"

            def sendComment(self, comment: str):
              ''' Add a message to Azure DevOps Pull Request'''
              data = {
                  "comments": [
                      {
                          "parentCommentId": 0,
                          "content": comment,
                          "commentType": 1
                      }
                  ],
                  "status": 1
              }
              r = requests.post(url=self.url, json=data, headers=self.headers)
              return (r.status_code, r.text)

          def run_cmd(cmd):
            """Run an OS command"""        
            proc = subprocess.Popen(shlex.split(cmd), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            stdout, stderr = proc.communicate()
            return proc.returncode, stdout.decode(), stderr.decode()
        
          pr = PullRequestAPI()

          return_code, stdout, stderr = run_cmd("terraform -chdir=${{ parameters.sub_folder }} plan -input=false")
          output = f"{stdout}\n{stderr}"
          print(output)

          output = re.sub(r'\x1b\[[0-9;]*m', '', output)

          title = f"Terraform Plan Output"
   
          description = f"[Click to navigate to detailed logs]({pr.buildurl})"
          summary = f"# {title}\n\n{description}\n\n```\n{output}\n```"
          with open(f"{os.getcwd()}/plan", "w") as file1:
            file1.write(summary)  
          print(f"##vso[task.addattachment type=Distributedtask.Core.Summary;name=Terraform Plan;]{os.getcwd()}/plan")

          if len(output) > 149500:
            output = "Terraform plan output exceeds character limit for a pull request comment.\nClick link above to see detailed logs."
          description = f"This comment has been automatically added by build validation pipeline.\n{description}"
          comment = f"# {title}\n\n{description}\n\n```\n{output}\n```"

          status_code, result = pr.sendComment(comment=comment)
          if (status_code != 200):
              print("##[group]Error commenting on pull request")
              print(f"##[warning]{result}")
              print("##[endgroup]")
        
          sys.exit(return_code)

    - bash: rm ~/.terraformrc
      displayName: 'TFC token Cleanup'
      workingDirectory: $(System.DefaultWorkingDirectory)/${{ parameters.sub_folder }}
      condition: eq(${{parameters.tfc_flag}}, 'true')